/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package IMS.view;

import IMS.controller.InventoryController;
import IMS.domain.Inventory;
import core.view.ReportUi;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import main.MagnumOpus;

/**
 *
 * @author Heinrich
 */
public class InventoryEODUi extends javax.swing.JFrame {
    private InventoryController inventoryController;
    ArrayList<Inventory> arrInventory;
    private MagnumOpus superUi;
    /**
     * Creates new form InventoryEOD
     */
    public InventoryEODUi(final MagnumOpus superUi) {
        initComponents();
        initTable();
        this.superUi = superUi;
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent evt){
                superUi.setVisible(true);
                
            }
        
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        jButtonOK = new javax.swing.JButton();
        jButtonGenerateReport = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jScrollPane1.setViewportView(jTable);

        jButtonOK.setText("OK");
        jButtonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOKActionPerformed(evt);
            }
        });

        jButtonGenerateReport.setText("Generate Report");
        jButtonGenerateReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenerateReportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 555, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonOK, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButtonGenerateReport, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonGenerateReport)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonOK)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOKActionPerformed
        // TODO add your handling code here:
        for(int i = 0; i < jTable.getRowCount(); i++){
            inventoryController.updateInventory(arrInventory.get(i).getItemNumber(), Integer.valueOf(jTable.getValueAt(i, 2).toString()));
        }
        this.dispose();
        
    }//GEN-LAST:event_jButtonOKActionPerformed

    private void jButtonGenerateReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenerateReportActionPerformed
        // TODO add your handling code here:
        ReportUi reportUi = new ReportUi();
        reportUi.setVisible(true);
        
    }//GEN-LAST:event_jButtonGenerateReportActionPerformed

    /**
     * @param args the command line arguments
     */
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonGenerateReport;
    private javax.swing.JButton jButtonOK;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable;
    // End of variables declaration//GEN-END:variables

    private void initTable(){
        inventoryController = new InventoryController();
        arrInventory = inventoryController.loadInventory();
        
        String[] columnName = {"Item Number", "Name", "Quantity", "Unit", "Stock Date"};
        
        Object[][] cell = new String[arrInventory.size()][columnName.length];
        for(int i = 0; i < arrInventory.size(); i++){
            cell[i][0] = String.valueOf(arrInventory.get(i).getItemNumber());
            cell[i][1] = arrInventory.get(i).getName();
            cell[i][2] = String.valueOf(arrInventory.get(i).getQuantity());
            cell[i][3] = arrInventory.get(i).getUnit();
            cell[i][4] = arrInventory.get(i).getDate().toString();
        }
       
        
        jTable.setModel(new DefaultTableModel(cell, columnName));
        
    }
    
}
